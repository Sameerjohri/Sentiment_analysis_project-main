# -*- coding: utf-8 -*-
"""Sntmnt_anlsys.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Kf3XUNzKxXbxLngHF5-BACooR0-ctJ8

#Importing Libraries
"""

#importing liibraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
LE=LabelEncoder()

"""#Loading File"""

dt=pd.read_csv('/content/product_reviews_dataset.csv')

"""#Data Summary"""

dt.head()

dt.tail()

dt.info()

dt.describe

dt.sample()

dt.shape

dt.dtypes

dt.columns

dt.isnull().sum()

dt.dropna(inplace=True)

plt.pie(x = dt['review_label'].value_counts(),
labels = dt['review_label'].value_counts().index, autopct = '%1.1f%%')
plt.show()


# IMPORT LIB FOR CLEANING TEXT
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize

nltk.download('stopwords')
nltk.download('punkt_tab')
nltk.download('wordnet')
nltk.download('omw-1.4')

def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    tokens = word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    tokens = [token for token in tokens if token not in stop_words]
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(token) for token in tokens]
    cleaned_text = ' '.join(tokens)
    return cleaned_text

clean_text("i love, to watch. Movies")

x=dt['review_text']

dt['review_text'].apply(clean_text)

dt.sample()

y=dt['review_label']

#tfidf
from sklearn.feature_extraction.text import TfidfVectorizer
TFIDF=TfidfVectorizer()

x=TFIDF.fit_transform(x)

x=x.toarray()

from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import joblib

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Create and train the MultinomialNB model
MNB=MultinomialNB()
MNB.fit(X_train, y_train)

# Make predictions on the test set
y_pred = MNB.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

MNB.fit(x,y)

MNB.score(x,y)

x[0].reshape(1,-1)

MNB.predict(x[0].reshape(1,-1))

MNB.predict(TFIDF.transform(["product is AMAZING"]))

# Save the trained model and vectorizer using joblib
joblib.dump(MNB, 'sentiment_model.pkl')
joblib.dump(TFIDF, 'vectorizer.pkl')

print("Model saved successfully!")
print("Files saved:")
print("- sentiment_model.pkl")
print("- vectorizer.pkl")



# Streamlit UI
import streamlit as st

st.title("üìù Sentiment Analysis of Product Reviews")
st.markdown("Enter a product review and find out if it's **Positive**, **Negative**, or **Neutral**.")

user_input = st.text_area("Enter Review:", "")

if st.button("Analyze Sentiment"):
    if user_input.strip() == "":
        st.warning("Please enter a review to analyze.")
    else:
        cleaned = clean_text(user_input)
        vectorized = vectorizer.transform([cleaned]).toarray()
        prediction = model.predict(vectorized)[0]
        st.success(f"Predicted Sentiment: **{prediction.upper()}**")